name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend-flask/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend-flask
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run backend tests with pytest
      run: |
        cd backend-flask
        pytest --cov=app --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-flask/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Upload backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend-flask/test-results.xml
          backend-flask/htmlcov/

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
      env:
        CI: true
        JEST_JUNIT_OUTPUT_DIR: ./test-results
        JEST_JUNIT_OUTPUT_NAME: results.xml
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/test-results/
          frontend/coverage/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd backend-flask
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        cd ../frontend
        npm ci
    
    - name: Run integration tests
      run: |
        cd backend-flask
        pytest tests/test_integration/ -v
    
    - name: Check test coverage thresholds
      run: |
        cd backend-flask
        pytest --cov=app --cov-fail-under=80
        echo "✅ Backend coverage threshold met"
        cd ../frontend
        npm test -- --coverage --watchAll=false --coverageThreshold='{"global":{"lines":70,"functions":70,"branches":70,"statements":70}}'
        echo "✅ Frontend coverage threshold met"

  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install backend dependencies
      run: |
        cd backend-flask
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort
    
    - name: Run Python linting
      run: |
        cd backend-flask
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check Python formatting
      run: |
        cd backend-flask
        black --check app tests
    
    - name: Check Python imports
      run: |
        cd backend-flask
        isort --check-only app tests
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint --if-present
    
    - name: Check frontend formatting
      run: |
        cd frontend
        npm run format:check --if-present